pipeline {
    agent any
    parameters {
        string(name: 'DOCKER_URL', defaultValue: 'public.ecr.aws/k7s0v3p5/nytaxi', description: 'ECR url')
        string(name: 'ENV', defaultValue: 'dev', description: 'Env variable')
        string(name: 'TAG', defaultValue: 'dev', description: 'Image default tag')
        string(name: 'REGION', defaultValue: 'eu-central-1', description: 'Cluster region')
        string(name: 'CLUSTER_NAME', defaultValue: 'nytaxi-cluster', description: 'Custer name')
        string(name: 'CREDENTIALS', defaultValue: 'aws-credentials', description: 'AWS Creds ID')
    }

    stages {
        stage('Build') {
            steps {
                sh './gradlew clean assemble'
            }
        }
        stage('Test') {
            steps {
                sh './gradlew test'
            }
        }
        stage('Build & Tag & Push Docker image') {
            steps {
                withAWS(credentials: params.CREDENTIALS, region: params.REGION) {
                    sh '''#!/bin/bash
                    aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ''' + params.DOCKER_URL + '''
                    '''
                    sh '''#!/bin/bash
                    set -e
                    DOCKER_IMAGE_VERSION=\$(./gradlew properties -q | grep 'version:' | awk '{print $2}')
                    DOCKER_IMAGE_NAME=\$(./gradlew properties -q | grep 'name:' | awk '{print $2}')
                    DOCKER_IMAGE_FULLNAME=\${DOCKER_IMAGE_NAME}:''' + params.TAG + '''
                    echo 'full name \$DOCKER_IMAGE_FULLNAME'

                    docker build -t \${DOCKER_IMAGE_NAME} .
                    docker tag \${DOCKER_IMAGE_NAME} ''' + params.DOCKER_URL + ''':''' + params.TAG + '''

                    docker push ''' + params.DOCKER_URL + ''':''' + params.TAG + '''
                    '''
                }
            }
        }
        stage('Update Kubernetes environment') {
            steps {
                withAWS(credentials: params.CREDENTIALS, region: params.REGION) {
                    sh "aws eks update-kubeconfig --region " + params.REGION + " --name " + params.CLUSTER_NAME + " --alias " + params.ENV
                    sh "kubectl config set-context --current=true --namespace=" + params.ENV
                    sh "echo Current Kubernetes Context: \$(kubectl config current-context)"
                    sh "echo Update Kubernetes addons"
                    sh '''
                    helm upgrade secrets-store-csi-driver config/cluster/helm/secrets-store-csi-driver/ \
                    --install --namespace kube-system --kube-context=''' + params.ENV + '''
                    helm upgrade secrets-store-csi-driver-provider-aws config/cluster/helm/secrets-store-csi-driver-provider-aws/ \
                    --install --namespace kube-system --kube-context=''' + params.ENV + '''
                    helm upgrade aws-load-balancer-controller config/cluster/helm/aws-load-balancer-controller/ \
                    --install --namespace kube-system --set clusterName=''' + params.CLUSTER_NAME + ''' --kube-context=''' + params.ENV + '''
                    '''
                    echo "Update Kubernetes Apps"
                    sh '''
                    AWS_SA_ROLE_ARN=\$(aws iam get-role --role-name secrets-store-csi-driver-role --query 'Role.[Arn]' --output text)
                    helm upgrade ''' + params.ENV + ''' config/cluster/helm/application \
                    --install --create-namespace --kube-context=''' + params.ENV + ''' \
                    --set image.tag=''' + params.TAG + ''' \
                    --set image.repository=''' + params.DOCKER_URL + ''' \
                    --set serviceAccount.roleArn=\${AWS_SA_ROLE_ARN} \
                    -f ./config/cluster/helm/application/values-''' + params.ENV + '''.yaml
                    '''
                }
            }
        }
    }
}
